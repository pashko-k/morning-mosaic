// obfuscateWords.cjs (generator) - encodes raw word lists under raw_words
const fs = require('fs');
const path = require('path');

function xorEncode(str, key) {
  return str.split('').map((ch,i)=>String.fromCharCode(ch.charCodeAt(0)^key.charCodeAt(i%key.length))).join('');
}

function encodeList(filePath, key) {
  const words = fs.readFileSync(filePath,'utf8')
    .split(/\r?\n/)
    .map(w=>w.trim())
    .filter(Boolean);
  const json = JSON.stringify(words);
  const xored = xorEncode(json, key);
  return Buffer.from(xored,'utf8').toString('base64');
}

const key='fd@3r!@#rxc$%g';
const enFile = path.join(__dirname,'words-en.txt'); // solution list EN
const ukFile = path.join(__dirname,'words-uk.txt'); // solution list UK
const enAllowedFile = path.join(__dirname,'allowed-en.txt'); // allowed guesses EN (superset)
const ukAllowedFile = path.join(__dirname,'allowed-uk.txt'); // allowed guesses UK (superset)

const encodedEN = encodeList(enFile, key);
const encodedUK = encodeList(ukFile, key);
let encodedAllowedEN = '';
let encodedAllowedUK = '';
try { encodedAllowedEN = encodeList(enAllowedFile, key); } catch(e){ console.warn('No allowed-en.txt', e.message); }
try { encodedAllowedUK = encodeList(ukAllowedFile, key); } catch(e){ console.warn('No allowed-uk.txt', e.message); }
const output = `// Auto-generated by raw_words/obfuscateWords.cjs\nexport const encodedEN = "${encodedEN}";\nexport const encodedUK = "${encodedUK}";\nexport const encodedAllowedEN = "${encodedAllowedEN}";\nexport const encodedAllowedUK = "${encodedAllowedUK}";\n`;
fs.writeFileSync(path.join(__dirname,'..','wordlist-obf.js'), output);
console.log('âœ… Obfuscated lists written to wordlist-obf.js from raw_words');